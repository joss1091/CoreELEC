diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index c350d41..5377ff1 100644
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -108,6 +108,7 @@ static u32 osd_vpp_misc_mask;
 static bool update_osd_vpp_misc;
 
 #ifdef CONFIG_GE2D_KEEP_FRAME
+#include <linux/amlogic/ge2d/ge2d.h>
 /* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
 /* #include <mach/mod_gate.h> */
 /* #endif */
@@ -134,6 +135,17 @@ bool platform_type = 1;
 /* for bit depth setting. */
 int bit_depth_flag = 8;
 
+struct amvideo_private {
+	struct vframe_s * ext_get_current;
+};
+
+struct amvideo_grabber_data {
+	int canvas_index;
+	u32 canvas0Addr;
+	u32 ge2dformat;
+	u64 size;
+};
+
 bool omx_secret_mode = false;
 EXPORT_SYMBOL(omx_secret_mode);
 #define DEBUG_FLAG_FFPLAY	(1<<0)
@@ -944,8 +956,7 @@ static int vf_get_states(struct vframe_states *states)
 
 static inline void video_vf_put(struct vframe_s *vf)
 {
-	struct vframe_provider_s *vfp = vf_get_provider(RECEIVER_NAME);
-	if (vfp && vf && atomic_dec_and_test(&vf->use_cnt)) {
+	if (vf && atomic_dec_and_test(&vf->use_cnt)) {
 		vf_put(vf, RECEIVER_NAME);
 		if (is_dolby_vision_enable())
 			dolby_vision_vf_put(vf);
@@ -5520,6 +5531,14 @@ static void _set_video_window(int *p)
  *********************************************************/
 static int amvideo_open(struct inode *inode, struct file *file)
 {
+	struct amvideo_private* priv =
+		kzalloc(sizeof(struct amvideo_private), GFP_KERNEL);
+
+	if (!priv)
+		return -ENOMEM;
+
+	file->private_data = priv;
+
 	return 0;
 }
 
@@ -5530,6 +5549,14 @@ static int amvideo_poll_open(struct inode *inode, struct file *file)
 
 static int amvideo_release(struct inode *inode, struct file *file)
 {
+	struct amvideo_private* priv = file->private_data;
+	if (priv->ext_get_current) {
+		ext_put_video_frame(priv->ext_get_current);
+	}
+
+	kfree(priv);
+	file->private_data = NULL;
+
 	if (blackout | force_blackout) {
 		/*	DisableVideoLayer();
 		don't need it ,it have problem on  pure music playing */
@@ -5550,6 +5577,7 @@ static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 {
 	long ret = 0;
 	void __user *argp = (void __user *)arg;
+	struct amvideo_private* priv = file->private_data;
 
 	switch (cmd) {
 	case AMSTREAM_IOC_SET_OMX_VPTS:{
@@ -5849,6 +5877,131 @@ static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 		vsync_slow_factor = arg;
 		break;
 
+	/****************************************************************
+	Video frame ioctl
+	*****************************************************************/
+	case AMVIDEO_EXT_GET_CURRENT_VIDEOFRAME:
+		{
+			struct vframe_s *vf;
+			int canvas_index;
+
+			ret = -EEXIST;
+
+			if (!priv->ext_get_current) {
+				ret = ext_get_cur_video_frame(&vf, &canvas_index);
+				if (!ret) {
+					priv->ext_get_current = vf;
+					put_user(canvas_index, (int __user *)argp);
+				}
+				else
+					ret = -EAGAIN;
+			}
+		}
+		break;
+
+	case AMVIDEO_EXT_PUT_CURRENT_VIDEOFRAME:
+		{
+			if (priv->ext_get_current) {
+				ext_put_video_frame(priv->ext_get_current);
+				priv->ext_get_current = NULL;
+				ret = 0;
+			}
+			else {
+				ret = -EEXIST;
+			}
+		}
+		break;
+
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_GE2D_FORMAT:
+		{
+			u32 format = 0;
+
+			ret = -ENOENT;
+
+			if (priv->ext_get_current) {
+				if ((priv->ext_get_current->type & VIDTYPE_VIU_422) == VIDTYPE_VIU_422) {
+					format = GE2D_FORMAT_S16_YUV422;
+				}
+				else if ((priv->ext_get_current->type & VIDTYPE_VIU_444) == VIDTYPE_VIU_444) {
+					format = GE2D_FORMAT_S24_YUV444;
+				}
+				else if ((priv->ext_get_current->type & VIDTYPE_VIU_NV21) == VIDTYPE_VIU_NV21) {
+					format = GE2D_FORMAT_M24_NV21;
+				}
+				put_user(format, (u32 __user *)argp);
+				ret = 0;
+			}
+		}
+		break;
+
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_SIZE:
+		{
+			u64 size;
+
+			ret = -ENOENT;
+
+			if (priv->ext_get_current) {
+				size = ((u64)priv->ext_get_current->width << 32) |
+					   priv->ext_get_current->height;
+				put_user(size, (u64 __user *)argp);
+				ret = 0;
+			}
+		}
+		break;
+
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_CANVAS0ADDR:
+		{
+			u32 canvas0Addr;
+
+			ret = -ENOENT;
+
+			if (priv->ext_get_current) {
+				canvas0Addr = priv->ext_get_current->canvas0Addr;
+				put_user(canvas0Addr, (u32 __user *)argp);
+				ret = 0;
+			}
+		}
+		break;
+
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_DATA:
+		{
+			struct vframe_s *vf;
+
+			ret = -EFAULT;
+
+			if (!priv->ext_get_current) {
+				int canvas_index;
+				ret = ext_get_cur_video_frame(&vf, &canvas_index);
+
+				if (!ret) {
+					struct amvideo_grabber_data grabber_data;
+
+					priv->ext_get_current = vf;
+
+					grabber_data.canvas_index = canvas_index;
+					grabber_data.canvas0Addr = priv->ext_get_current->canvas0Addr;
+
+					if ((priv->ext_get_current->type & VIDTYPE_VIU_422) == VIDTYPE_VIU_422) {
+						grabber_data.ge2dformat = GE2D_FORMAT_S16_YUV422;
+					}
+					else if ((priv->ext_get_current->type & VIDTYPE_VIU_444) == VIDTYPE_VIU_444) {
+						grabber_data.ge2dformat = GE2D_FORMAT_S24_YUV444;
+					}
+					else if ((priv->ext_get_current->type & VIDTYPE_VIU_NV21) == VIDTYPE_VIU_NV21) {
+						grabber_data.ge2dformat = GE2D_FORMAT_M24_NV21;
+					}
+
+					grabber_data.size = ((u64)priv->ext_get_current->width << 32) |
+						   priv->ext_get_current->height;
+
+					copy_to_user(argp, &grabber_data, sizeof(struct amvideo_grabber_data));
+				}
+				else
+					ret = -EAGAIN;
+			}
+		}
+		break;
+
 	default:
 		return -EINVAL;
 	}
@@ -5885,6 +6038,11 @@ static long amvideo_compat_ioctl(struct file *file, unsigned int cmd, ulong arg)
 	case AMSTREAM_IOC_GET_3D_TYPE:
 	case AMSTREAM_IOC_GET_SOURCE_VIDEO_3D_TYPE:
 	case AMSTREAM_IOC_GET_VSYNC_SLOW_FACTOR:
+	case AMVIDEO_EXT_GET_CURRENT_VIDEOFRAME:
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_GE2D_FORMAT:
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_SIZE:
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_CANVAS0ADDR:
+	case AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_DATA:
 		arg = (unsigned long) compat_ptr(arg);
 	case AMSTREAM_IOC_TRICKMODE:
 	case AMSTREAM_IOC_VPAUSE:
@@ -5904,6 +6062,7 @@ static long amvideo_compat_ioctl(struct file *file, unsigned int cmd, ulong arg)
 	case AMSTREAM_IOC_SET_3D_TYPE:
 	case AMSTREAM_IOC_SET_VSYNC_UPINT:
 	case AMSTREAM_IOC_SET_VSYNC_SLOW_FACTOR:
+	case AMVIDEO_EXT_PUT_CURRENT_VIDEOFRAME:
 		return amvideo_ioctl(file, cmd, arg);
 	default:
 		return -EINVAL;
diff --git a/drivers/amlogic/display/ge2d/ge2d_wq.c b/drivers/amlogic/display/ge2d/ge2d_wq.c
index a44f12a..f29b087 100644
--- a/drivers/amlogic/display/ge2d/ge2d_wq.c
+++ b/drivers/amlogic/display/ge2d/ge2d_wq.c
@@ -540,19 +540,36 @@ static void build_ge2d_config(struct config_para_s *cfg,
 
 		if (cfg->src_planes[0].addr) {
 			src->canvas_index = index;
-			canvas_config(index++,
-				      cfg->src_planes[0].addr,
-				      cfg->src_planes[0].w * src->bpp / 8,
-				      cfg->src_planes[0].h,
-				      CANVAS_ADDR_NOWRAP,
-				      CANVAS_BLKMODE_LINEAR);
+
+			if (cfg->src_planes[1].addr ||
+				cfg->src_planes[2].addr ||
+				cfg->src_planes[3].addr)
+			{
+				// Multi plane
+				canvas_config(index++,
+					cfg->src_planes[0].addr,
+					cfg->src_planes[0].w,
+					cfg->src_planes[0].h,
+					CANVAS_ADDR_NOWRAP,
+					CANVAS_BLKMODE_LINEAR);
+			}
+			else
+			{
+				// Single plane
+				canvas_config(index++,
+					cfg->src_planes[0].addr,
+					cfg->src_planes[0].w * (src->bpp >> 3),
+					cfg->src_planes[0].h,
+					CANVAS_ADDR_NOWRAP,
+					CANVAS_BLKMODE_LINEAR);
+			}
 		}
 		/* multi-src_planes */
 		if (cfg->src_planes[1].addr) {
 			src->canvas_index |= index << 8;
 			canvas_config(index++,
 				      cfg->src_planes[1].addr,
-				      cfg->src_planes[1].w * src->bpp / 8,
+				      cfg->src_planes[1].w,
 				      cfg->src_planes[1].h,
 				      CANVAS_ADDR_NOWRAP,
 				      CANVAS_BLKMODE_LINEAR);
@@ -561,7 +578,7 @@ static void build_ge2d_config(struct config_para_s *cfg,
 			src->canvas_index |= index << 16;
 			canvas_config(index++,
 				      cfg->src_planes[2].addr,
-				      cfg->src_planes[2].w * src->bpp / 8,
+				      cfg->src_planes[2].w,
 				      cfg->src_planes[2].h,
 				      CANVAS_ADDR_NOWRAP,
 				      CANVAS_BLKMODE_LINEAR);
@@ -570,7 +587,7 @@ static void build_ge2d_config(struct config_para_s *cfg,
 			src->canvas_index |= index << 24;
 			canvas_config(index++,
 				      cfg->src_planes[3].addr,
-				      cfg->src_planes[3].w * src->bpp / 8,
+				      cfg->src_planes[3].w,
 				      cfg->src_planes[3].h,
 				      CANVAS_ADDR_NOWRAP,
 				      CANVAS_BLKMODE_LINEAR);
@@ -582,14 +599,32 @@ static void build_ge2d_config(struct config_para_s *cfg,
 		dst->yres = cfg->dst_planes[0].h;
 		dst->ge2d_color_index = cfg->dst_format;
 		dst->bpp = bpp(cfg->dst_format);
+
 		if (cfg->dst_planes[0].addr) {
 			dst->canvas_index = index;
-			canvas_config(index++ & 0xff,
-				      cfg->dst_planes[0].addr,
-				      cfg->dst_planes[0].w,
-				      cfg->dst_planes[0].h,
-				      CANVAS_ADDR_NOWRAP,
-				      CANVAS_BLKMODE_LINEAR);
+
+			if (cfg->dst_planes[1].addr ||
+				cfg->dst_planes[2].addr ||
+				cfg->dst_planes[3].addr)
+			{
+				// Multi plane
+				canvas_config(index++ & 0xff,
+					cfg->dst_planes[0].addr,
+					cfg->dst_planes[0].w,
+					cfg->dst_planes[0].h,
+					CANVAS_ADDR_NOWRAP,
+					CANVAS_BLKMODE_LINEAR);
+			}
+			else
+			{
+				// Single plane
+				canvas_config(index++ & 0xff,
+					cfg->dst_planes[0].addr,
+					cfg->dst_planes[0].w * (dst->bpp >> 3),
+					cfg->dst_planes[0].h,
+					CANVAS_ADDR_NOWRAP,
+					CANVAS_BLKMODE_LINEAR);
+			}
 		}
 
 		/* multi-src_planes */
diff --git a/include/linux/amlogic/amports/video.h b/include/linux/amlogic/amports/video.h
index 5384d87..3d6cf88 100644
--- a/include/linux/amlogic/amports/video.h
+++ b/include/linux/amlogic/amports/video.h
@@ -25,6 +25,16 @@ u32 RDMA_READ_REG(u32 adr);
 int RDMA_SET_READ(u32 adr);
 #endif
 
+#define AMVIDEO_MAGIC  'X'
+
+#define AMVIDEO_EXT_GET_CURRENT_VIDEOFRAME _IOR((AMVIDEO_MAGIC), 0x01, u32)
+#define AMVIDEO_EXT_PUT_CURRENT_VIDEOFRAME _IO((AMVIDEO_MAGIC), 0x02)
+
+#define AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_GE2D_FORMAT _IOR((AMVIDEO_MAGIC), 0x03, u32)
+#define AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_SIZE _IOR((AMVIDEO_MAGIC), 0x04, u64)
+#define AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_CANVAS0ADDR _IOR((AMVIDEO_MAGIC), 0x05, u32)
+#define AMVIDEO_EXT_CURRENT_VIDEOFRAME_GET_DATA _IOR((AMVIDEO_MAGIC), 0x06, struct amvideo_grabber_data)
+
 void try_free_keep_video(int flags);
 void vh265_free_cmabuf(void);
 void vh264_4k_free_cmabuf(void);
